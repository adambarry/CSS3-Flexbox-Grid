/*******************************************************************************
Flexbox Grid Styles
*******************************************************************************/

/*
////////////////////////////////////////////////////////////////////////////////
//    1:  width: 100%; was initially added to make sure that g--fit'ed .grid
//        elements would span the entire width of its parent.
//
//    2:  width: 100%; was removed because it makes y-axis grid-cells exceed their
//        grids. SO NO WIDTH: 100% FOR .GRID ELEMENTS!
//
//    3:  Make y-axis grid-cell elements span the available width. Disabled again
//        as grid-cell elements shouldn't try to act as grid-elements, and because
//        it makes the grid elements overflow parent grids in some test-cases.
//        If it needs to be part of the code, it should be hard-linked to
//        grid-cell elements, i.e.:
//
//        .grid-cell.grid--y {
//            width: 100%;
//        }
////////////////////////////////////////////////////////////////////////////////
*/

.grid {
    /* width: 100%; */ /* 1, 2 */
    max-width: 100%;
    padding: 0;
    margin: 0;
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    list-style: none;
}

.grid--y {
    /* // width: 100%; */ /* 3 */
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
}

/*
//
//    1:  Prevent overflowing content from destroying the layout
//    2:  Stretch to fill the parent container
//
*/

.grid-cell,
.grid > .grid {
    /* width: auto; */ /* http://oli.jp/2011/css3-flexbox/ - if display: box */
    max-width: 100%;
    overflow: hidden;
    position: relative;
    -webkit-box-flex: 1;
    -webkit-flex: 1;
    -moz-box-flex: 1;
    -ms-flex: 1;
    flex: 1; /* 2 */
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    //display: block;
}


/* Grid Cell Spacing (gutters) for individual grid cells
*******************************************************************************/
.g--gutter {
    margin: 8px;
}


/*: Directional
-------------------------------------------------------------------------------*/
.g--gutter-top {
    margin-top: 8px;
}

.g--gutter-right {
    margin-right: 8px;
}

.g--gutter-bottom {
    margin-bottom: 8px;
}

.g--gutter-left {
    margin-left: 8px;
}


/* Grid-Wide Grid Cell Spacing (gutters): General
*******************************************************************************/

/*: X-Axis Grid
-------------------------------------------------------------------------------*/
.grid--gutters:not(.grid--y) > .grid,
.grid--gutters:not(.grid--y) > .grid-cell {
    margin: 8px 4px;
}

.grid--gutters:not(.grid--y) > .grid:first-child,
.grid--gutters:not(.grid--y) > .grid-cell:first-child {
    margin-left: 8px;
}

.grid--gutters:not(.grid--y) > .grid:last-child,
.grid--gutters:not(.grid--y) > .grid-cell:last-child {
    margin-right: 8px;
}


/*: X-Axis Grid (right-to-left text direction)
-------------------------------------------------------------------------------*/
[dir="rtl"] .grid--gutters:not(.grid--y) > .grid:first-child,
[dir="rtl"] .grid--gutters:not(.grid--y) > .grid-cell:first-child {
    margin-right: 8px;
    margin-left: 4px;
}

[dir="rtl"] .grid--gutters:not(.grid--y) > .grid:last-child,
[dir="rtl"] .grid--gutters:not(.grid--y) > .grid-cell:last-child {
    margin-right: 4px;
    margin-left: 8px;
}


/*: Y-Axis Grid
-------------------------------------------------------------------------------*/
.grid--gutters[class*="grid--y"] > .grid,
.grid--gutters[class*="grid--y"] > .grid-cell {
    margin: 4px 8px;
}

.grid--gutters[class*="grid--y"] > .grid:first-child,
.grid--gutters[class*="grid--y"] > .grid-cell:first-child {
    margin-top: 8px;
}

.grid--gutters[class*="grid--y"] > .grid:last-child,
.grid--gutters[class*="grid--y"] > .grid-cell:last-child {
    margin-bottom: 8px;
}


/* Grid-Wide Grid Cell Spacing (gutters): Main-Axis
*******************************************************************************/

/*: X-Axis Grid
-------------------------------------------------------------------------------*/
.grid--gutters-main:not(.grid--y) > .grid-cell {
    margin: 0 4px;
}

.grid--gutters-main:not(.grid--y) > .grid-cell:first-child {
    margin-left: 0;
}

.grid--gutters-main:not(.grid--y) > .grid-cell:last-child {
    margin-right: 0;
}


/*: X-Axis Grid: Nested horizontal grids
-------------------------------------------------------------------------------*/
.grid--gutters-main:not(.grid--y) > .grid:not(.grid--y) > .grid-cell:first-child {
    margin-left: 4px;
}

.grid--gutters-main:not(.grid--y) > .grid:not(.grid--y) > .grid-cell:last-child {
    margin-right: 4px;
}

/*
    When the first child is an x-axis grid
*/
.grid--gutters-main:not(.grid--y) > .grid:not(.grid--y):first-child > .grid-cell:first-child {
    margin-left: 0;
}

/*
    When the last child is an x-axis grid
*/
.grid--gutters-main:not(.grid--y) > .grid:not(.grid--y):last-child > .grid-cell:last-child {
    margin-right: 0;
}


/*: X-Axis Grid: Nested vertical grids
-------------------------------------------------------------------------------*/
.grid--gutters-main:not(.grid--y) > .grid[class*="grid--y"] > .grid-cell {
    margin-right: 4px;
    margin-left: 4px;
}

/*
    When the first child is a y-axis grid
*/
.grid--gutters-main:not(.grid--y) > .grid[class*="grid--y"]:first-child > .grid-cell {
    margin-left: 0;
}

/*
    When the last child is a y-axis grid
*/
.grid--gutters-main:not(.grid--y) > .grid[class*="grid--y"]:last-child > .grid-cell {
    margin-right: 0;
}


/*: Y-Axis Grid
-------------------------------------------------------------------------------*/
.grid--gutters-main[class*="grid--y"] > .grid-cell {
    margin: 4px 0;
}

.grid--gutters-main[class*="grid--y"] > .grid-cell:first-child {
    margin-top: 0;
}

.grid--gutters-main[class*="grid--y"] > .grid-cell:last-child {
    margin-bottom: 0;
}


/*: Y-Axis Grid: Nested vertical grids
-------------------------------------------------------------------------------*/
.grid--gutters-main[class*="grid--y"] > .grid[class*="grid--y"] > .grid-cell:first-child {
    margin-top: 4px;
}

.grid--gutters-main[class*="grid--y"] > .grid[class*="grid--y"] > .grid-cell:last-child {
    margin-bottom: 4px;
}

/*
    When the first child is a y-axis grid
*/
.grid--gutters-main[class*="grid--y"] > .grid[class*="grid--y"]:first-child > .grid-cell:first-child {
        margin-top: 0;
}

/*
    When the last child is an y-axis grid
*/
.grid--gutters-main[class*="grid--y"] > .grid[class*="grid--y"]:last-child > .grid-cell:last-child {
    margin-bottom: 0;
}


/*: X-Axis Grid: Nested horizontal grids
-------------------------------------------------------------------------------*/
.grid--gutters-main[class*="grid--y"] > .grid:not(.grid--y) > .grid-cell {
    margin-top: 4px;
    margin-bottom: 4px;
}

/*
    When the first child is a x-axis grid
*/
.grid--gutters-main[class*="grid--y"] > .grid:not(.grid--y):first-child > .grid-cell {
    margin-top: 0;
}

/*
    When the last child is a x-axis grid
*/
.grid--gutters-main[class*="grid--y"] > .grid:not(.grid--y):last-child > .grid-cell {
    margin-bottom: 0;
}


/* Wrapping
*******************************************************************************/
.g--fit {
    -webkit-box-flex: 0 !important;
    -moz-box-flex: 0 !important;
    -webkit-flex: 0 0 auto !important;
    -ms-flex: 0 0 auto !important;
    flex: 0 0 auto !important;
}

.g--wrap {
    -webkit-box-flex: 0 !important;
    -moz-box-flex: 0 !important;
    -webkit-flex: 0 0 auto !important;
    -ms-flex: 0 0 auto !important;
    flex: 0 0 auto !important;

    /*
        1:  Make sure that the flex container/item wraps its content on the
            cross-axis

        2:  Required for Safari
    */

    -webkit-align-self: flex-start; /* 2 */
    -ms-flex-item-align: start;
    align-self: flex-start; /* 1 */
}


/* Grid Cell Alignment
*******************************************************************************/
/*
    //justify-content: flex-start is the default, so there's no need to have
    //a specific definition for that, besides being able to make the HTML more
    //declarative - so let's keep it (at least for now).
*/

.grid--main-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -webkit-justify-content: flex-start;
    -ms-flex-pack: start;
    justify-content: flex-start;
}

.grid--main-center {
    -webkit-box-pack: center;
    -moz-box-pack: center;
    -webkit-justify-content: center;
    -ms-flex-pack: center;
    justify-content: center;
}

.grid--main-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -webkit-justify-content: flex-end;
    -ms-flex-pack: end;
    justify-content: flex-end;
}


/* General Cross-Axis Alignment
*******************************************************************************/
.grid.g--cross-start {
 -webkit-align-items: flex-start;
 -ms-flex-align: flex-start;
   align-items: flex-start;
}

.grid.g--cross-center {
 -webkit-align-items: center;
 -ms-flex-align: center;
   align-items: center;
}

.grid.g--cross-stretch {
 -webkit-align-items: stretch;
 -ms-flex-align: stretch;
   align-items: stretch;
}

.grid.g--cross-baseline {
 -webkit-align-items: baseline;
 -ms-flex-align: baseline;
   align-items: baseline;
}

.grid.g--cross-end {
 -webkit-align-items: flex-end;
 -ms-flex-align: flex-end;
   align-items: flex-end;
}


/* Individual Cross-Axis Grid Cell Alignment
*******************************************************************************/
.g--cross-start {
    -webkit-align-self: flex-start;
    -ms-flex-item-align: start;
    align-self: flex-start;
}

.g--cross-center {
    -webkit-align-self: center;
    -ms-flex-item-align: center;
    align-self: center;
}

.g--cross-stretch {
    -webkit-align-self: stretch;
    -ms-flex-item-align: stretch;
    align-self: stretch;
}

.g--cross-baseline {
    -webkit-align-self: baseline;
    -ms-flex-item-align: baseline;
    align-self: baseline;
}

.g--cross-end {
    -webkit-align-self: flex-end;
    -ms-flex-item-align: end;
    align-self: flex-end;
}


/* Individual Grid Cell Sizes
*******************************************************************************/
.g--by2 {
    flex-grow: 2 !important;
}

.g--by3 {
    flex-grow: 3 !important;
}


.g--1of5 {
    width: 20%;
    -webkit-flex: none !important;
    -ms-flex: none !important;
    flex: none !important;
}

.g--1of4 {
    width: 25%;
    -webkit-flex: none !important;
    -ms-flex: none !important;
    flex: none !important;
}

/*
//
//  1: Fixes Todo 3
//
*/

/* //.grid:not(.grid--y) > .g--1of3, */ /* 1 */
.g--1of3 {
    width: 33.333%;
    width: calc(100% / 3);
    -webkit-flex: none !important;
    -ms-flex: none !important;
    flex: none !important;
    /* min-width: 120px; */ /* Adding this somehow shrinks the flexcontainer to fit the contents */
}

.g--1of2,
.g--2of4 {
    width: 50%;
    -webkit-flex: none !important;
    -ms-flex: none !important;
    flex: none !important;
}

.g--1of2,
.g--2of4 {
    width: 50%;
    -webkit-flex: none;
    -ms-flex: none;
    flex: none;
}

.g--2of3 {
    width: 66.666%;
    width: calc(100% / 3);
    -webkit-flex: none !important;
    -ms-flex: none !important;
    flex: none !important;
}

.g--3of4 {
    width: 75%;
    -webkit-flex: none !important;
    -ms-flex: none !important;
    flex: none !important;
}


/* Ordering
*******************************************************************************/
.g--order1 {
    -webkit-box-ordinal-group: 2;
    -moz-box-ordinal-group: 2;
    -webkit-order: 1;
    -ms-flex-order: 1;
    order: 1;
}